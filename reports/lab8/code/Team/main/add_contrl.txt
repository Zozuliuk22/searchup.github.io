 public IActionResult CreateEvent()
        {
            return View();
        }

        [HttpPost]
        [Authorize]
        public async Task<IActionResult> CreateEvent(CreateEventViewModel eventViewModel)
        {
            if (ModelState.IsValid){
                var creator = await _userManager.GetUserAsync(User);

                // create chat for event
                Chat eventChat = new Chat{
                    Name = $"{eventViewModel.Title} chat",
                    ChatType = ChatType.Group
                };
                await _chatService.CreateAsync(eventChat, creator.Id);
                
                // create event object
                Event eventObj = new Event{
                    Title = eventViewModel.Title,
                    Description = eventViewModel.Description,
                    StartTime = eventViewModel.StartTime,
                    EndTime = eventViewModel.EndTime,
                    Topics = await _interestsService.GetInterestsById(eventViewModel.SelectedTopicsId),
                    ChatId = eventChat.Id
                };

                // upload files
                if(eventViewModel.Files != null){
                    string absoluteDir = Path.Combine(_appEnviroment.WebRootPath, "FileStorage");
                    string serverStorageDir = Path.Combine("/FileStorage");

                    string fileName, absolutePath, relativePath;
                    eventObj.AttachedFiles = new List<EventAttachedFile>();

                    foreach (var file in eventViewModel.Files)
                    {
                        fileName = Guid.NewGuid().ToString()+'_'+file.FileName;
                        absolutePath = Path.Combine(absoluteDir, fileName);
                        relativePath = Path.Combine(serverStorageDir, fileName);

                        using (var fileStream  = new FileStream(absolutePath, FileMode.Create)){
                            await file.CopyToAsync(fileStream);
                        }
                        // connect event with files
                        eventObj.AttachedFiles.Add(new EventAttachedFile(){Path = relativePath});   
                    }
                }

                await _eventService.CreateAsync(eventObj, creator.Id);
                return RedirectToAction("EventProfile", "Events", new {id = eventObj.Id});
            }
            return View("Error");
        }